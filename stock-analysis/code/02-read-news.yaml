kind: remote
metadata:
  name: news-reader
  tag: ''
  hash: b4ca624c75d5133b736dd43a88ba78fee867a95f
  project: stocks-dani
spec:
  command: ''
  args: []
  image: ''
  description: ''
  min_replicas: 1
  max_replicas: 4
  env: []
  base_spec:
    apiVersion: nuclio.io/v1
    kind: Function
    metadata:
      annotations:
        nuclio.io/generated_by: function generated from /User/test/demos/stock-analysis/code/02-read-news.ipynb
      labels: {}
      name: news-reader
    spec:
      build:
        baseImage: mlrun/mlrun:0.6.5-rc15
        commands:
        - pip install beautifulsoup4
        - pip install pandas
        - pip install v3io_frames
        functionSourceCode: 
        noBaseImagesPull: true
      env:
      - name: V3IO_ACCESS_KEY
        value: a053dc07-03d1-42da-824e-9b740ac307f4
      - name: V3IO_USERNAME
        value: dani
      - name: V3IO_API
        value: v3io-webapi.default-tenant.svc:8081
      handler: 02-read-news:handler
      runtime: python:3.6
      volumes: []
  source: ''
  build:
    commands: []
    code_origin: https://github.com/daniels290813/demos.git#f1d8e6d59a84cf237c1819343019bd028c589796:news-reader.ipynb
  default_handler: handler
  affinity: null
verbose: false
